// Generated by CoffeeScript 1.3.3
(function() {
  var Detector;

  Detector = {};

  Detector.getBlobsInCanvas = function(canvas) {
    var ctx, imgData;
    ctx = canvas.getContext('2d');
    imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    return Detector.getBlobs(imgData, 200);
  };

  Detector.getBlobs = function(pixels, threshold) {
    var allBlobs, b, blob, d, g, i, r, searchNearby, v, x, y, _i, _j, _k, _l, _len, _ref, _ref1, _ref2;
    d = pixels.data;
    for (i = _i = 0, _ref = d.length; _i <= _ref; i = _i += 4) {
      r = d[i];
      g = d[i + 1];
      b = d[i + 2];
      v = 0.2126 * r + 0.7152 * g + 0.0722 * b >= threshold ? 255 : 0;
      d[i] = d[i + 1] = d[i + 2] = v;
    }
    searchNearby = function(blob, x, y) {
      var pixelPos;
      pixelPos = (y * 4 * pixels.width) + (x * 4);
      d[pixelPos] = 0;
      if (blob.minX > x) {
        blob.minX = x;
      }
      if (blob.maxX < x) {
        blob.maxX = x;
      }
      if (blob.minY > y) {
        blob.minY = y;
      }
      if (blob.maxY < y) {
        blob.maxY = y;
      }
      if (d[pixelPos - 4] === 255) {
        searchNearby(blob, x - 1, y);
      }
      if (d[pixelPos - 4 * pixels.width] === 255) {
        searchNearby(blob, x, y - 1);
      }
      if (d[pixelPos + 4 * pixels.width] === 255) {
        searchNearby(blob, x, y + 1);
      }
      if (d[pixelPos + 4] === 255) {
        return searchNearby(blob, x + 1, y);
      }
    };
    allBlobs = [];
    d = pixels.data;
    for (x = _j = 0, _ref1 = pixels.width; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
      for (y = _k = 0, _ref2 = pixels.height; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; y = 0 <= _ref2 ? ++_k : --_k) {
        if (d[(x * 4) + (y * 4 * pixels.width)] === 255) {
          blob = {
            minX: pixels.width,
            minY: pixels.height,
            maxX: 0,
            maxY: 0
          };
          allBlobs.push(blob);
          searchNearby(blob, x, y);
        }
      }
    }
    for (_l = 0, _len = allBlobs.length; _l < _len; _l++) {
      blob = allBlobs[_l];
      blob.centerX = blob.minX + (blob.maxX - blob.minX) / 2;
      blob.centerY = blob.minY + (blob.maxY - blob.minY) / 2;
      blob.width = blob.maxX - blob.minX + 1;
      blob.height = blob.maxY - blob.minY + 1;
    }
    return allBlobs;
  };

  window.Detector = Detector;

}).call(this);
